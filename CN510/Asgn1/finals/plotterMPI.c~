/*
  CN510 Assignment 1 : plotter.c

  A simple C program that outputs the results of the analytic 
  solution to to the differential equation defined in 
  asssignment 1. 

  John Joseph
  9/4/2013
*/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <mpi.h>

#define DT 0.05
#define T_MAX 5

typedef float T; 

void runTests(T *x0, T t0, T I, T A, char numTest);

T solveA(T A, T D, T C, T t);
T solveRD(T x0, T I, T A);
T solveE(T x0, T I, T A);
T solveRK(T x0, T I, T A);

T eulerAdvance(T x0, T v, T dt);

int main(int argc, char* argv[])
{
  int rank,size;
 
  

  MPI_Init(&argc, &argv);

  MPI_Comm_rank (MPI_COMM_WORLD, &rank);        /* get current process id */
  MPI_Comm_size (MPI_COMM_WORLD, &size);        /* get number of processes */

   T I, A;
   double t1,t2;
   t1 = MPI_Wtime();

  T *results = malloc(sizeof(T)*4);

  switch(rank){
  case 0:
    {
      I=5, A=1;
      runTests(results,0,I,A,'1');
  
      I=0;
      runTests(results,0,I,A,'2');

      
    }
  default:
    {
      I=5, A=2;
      runTests(results,0,I,A,'3');
      
      I=0, A=1;
      runTests(results,0,I,A,'4');
    }
  }

  //printf( "Hello world from process %d of %d\n", rank, size );

  MPI_Barrier(MPI_COMM_WORLD);
  t2 = MPI_Wtime();
  printf("Elapsed time is %lf\n",t2-t1);


  MPI_Finalize();
  free(results);
  return 0;
}

void runTests(T *results, T t0, T I, T A, char numTest)
{
  T xA=results[0], xE=results[1], xRK=results[2], xRD=results[3];
  T diffE=(xA-xE), diffRK=(xA-xRK), diffRD=(xA-xRD);
  T C, D;
  T t = t0;
  FILE *output;
  char *fileName = malloc(sizeof(char)*14);
  
  strcpy(fileName,"./data/dat_.out");
  fileName[10]=numTest;
  //printf("%s\n",fileName);
  output=fopen(fileName,"w");
  
  D = I/A;
  C = xA-D;

  do  {
    xA = solveA(A, D, C, t);
        
    diffE = fabs(xA-xE);
    diffRK = fabs(xA-xRK);
    diffRD = fabs(xA-xRD);

    fprintf(output,
	    "%lf \t %lf \t %lf \t %lf \t %lf \t %lf\t %lf \t %lf\n",
	    t,
	    xA,
	    xE,
	    xRD,
	    xRK,
	    diffE,
	    diffRK,
	    diffRD);
    
    xE = solveE(xE, I, A);
    xRK = solveRK(xRK, I, A);
    xRD = solveRD(xRD,I,A);

        
    //printf("%lf \t %lf \t %lf\n",xA,xE,xA-xE);

    t += DT;
  } while (t<=T_MAX+DT);
  results[0]=xA; results[1]=xE; results[2]=xRK; results[3]=xRD;
  fclose(output);
  return;
}

T solveA(T A, T D, T C, T t)
{
  return C*exp(-A*t)+D;
}

T solveRD(T x0, T I, T A)
{
  return (x0-(I/A))*exp(-A*DT)+(I/A);
}

T solveE(T x0, T I, T A)
{
  T v = I - A*x0;
  return eulerAdvance(x0,v,DT);
}

T solveRK(T x0, T I, T A)
{
  T k1,k2,k3,k4,s;

  k1 = I - A*x0;
  k2 = I - A*eulerAdvance(x0, k1, DT/2);
  k3 = I - A*eulerAdvance(x0, k2, DT/2);
  k4 = I - A*eulerAdvance(x0 ,k3, DT);
  s = (k1+2*k2+2*k3+k4) / 6.0;

  return eulerAdvance(x0, s, DT);
}

T eulerAdvance(T x0, T v, T dt)
{
  return x0 + dt * v;
}
